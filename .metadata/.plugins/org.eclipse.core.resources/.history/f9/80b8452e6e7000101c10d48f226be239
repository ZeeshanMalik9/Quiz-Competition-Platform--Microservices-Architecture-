package com.proj.service;

import com.proj.DAO.QuizDAO;
import com.proj.models.Question;
import com.proj.models.Quiz;
import com.proj.models.Response;
import com.proj.models.WrapperQuestions;

import jakarta.persistence.EntityManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class QuizeService {

    @Autowired
    private QuizDAO quizDAO;

    @Autowired
    private EntityManager entityManager;

    public ResponseEntity<String> createQuiz(String category, String title, int qNum) {
        List<Question> resultList = entityManager
                .createNativeQuery("SELECT * FROM questions WHERE category = ? ORDER BY RAND() LIMIT " + qNum, Question.class)
                .setParameter(1, category)
                .getResultList();

        Quiz quiz = new Quiz();
        quiz.setTitle(title);
        quiz.setQuestion(resultList);

        quizDAO.save(quiz);
        return new ResponseEntity<>("Quiz Created Successfully", HttpStatus.CREATED);
    }

    public ResponseEntity<List<WrapperQuestions>> getWrapperQustions(int id) {
        Optional<Quiz> quizOptional = quizDAO.findById(id);

        if (quizOptional.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        List<Question> questions = quizOptional.get().getQuestion();
        List<WrapperQuestions> wrappers = new ArrayList<>();

        for (Question q : questions) {
            wrappers.add(new WrapperQuestions(
                    q.getId(), q.getQuestionTitle(),
                    q.getOption1(), q.getOption2(), q.getOption3(), q.getOption4()));
        }

        return new ResponseEntity<>(wrappers, HttpStatus.OK);
    }

	public ResponseEntity<String> getSubmitResult(int id, List<Response> response) {
		
		Optional<Quiz> quiz = quizDAO.findById(id);
		List<Question> question = quiz.get().getQuestion();
		
		int rightAnswers =0;
		int cnt=0;
		for(Response res:response) {
			if(res.getResponse().equals(question.get(cnt).getRightAnswer())){
				rightAnswers++;
			}
			cnt++;
		}
		
		return new ResponseEntity<>(("Your Score Is"+rightAnswers),HttpStatus.OK);
		
	}
}
